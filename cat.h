#ifndef CAT_H
#define CAT_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <stdarg.h>
#include "cat.tab.h"  // Use the tokens generated by Bison

#define MAX_SYMBOLS 1000
#define MAX_ID_LENGTH 255

// Symbol types
typedef enum {
    SYM_VARIABLE,
    SYM_FUNCTION,
    SYM_PARAMETER
} SymbolType;

// Data types
typedef enum {
    TYPE_INT,
    TYPE_FLOAT,
    TYPE_VOID
} DataType;

// Symbol table entry
typedef struct SymbolEntry {
    char name[MAX_ID_LENGTH];
    SymbolType symType;
    DataType dataType;
    int scope;
    union {
        int intValue;
        float floatValue;
    } value;
    int initialized;
} SymbolEntry;

// Node types for AST
typedef enum {
    NODE_PROGRAM,
    NODE_FUNCTION,
    NODE_BLOCK,
    NODE_IF,
    NODE_SWITCH,
    NODE_CASE,
    NODE_IMPORT,
    NODE_VARDECL,
    NODE_ASSIGNMENT,
    NODE_BINARY_OP,
    NODE_UNARY_OP,
    NODE_CALL,
    NODE_CONSTANT,
    NODE_IDENTIFIER,
    NODE_BREAK,
    NODE_EXERT,
    NODE_CALL_BLOCK,
} NodeType;


// AST node structure
typedef struct ASTNode {
    NodeType type;
    union {
        // For constants
        struct {
            DataType dataType;
            union {
                int intValue;
                float floatValue;
            };
        } constant;

        struct {
            struct ASTNode *call;   // The function call node
            struct ASTNode *block; // The associated block node
        } callBlock; 

        // For identifiers
        struct {
            char name[MAX_ID_LENGTH];
            int symbolIndex;
        } identifier;

        // For operators
        struct {
            int operator;
            struct ASTNode *left;
            struct ASTNode *right;
        } operation;

        // For function calls
        struct {
            char name[MAX_ID_LENGTH];
            struct ASTNode **arguments;
            int argCount;
        } call;

        // For control structures
        struct {
            struct ASTNode *condition;
            struct ASTNode *thenBranch;
            struct ASTNode *elseBranch;
        } control;
    } data;

    struct ASTNode *next;  // For statement lists
} ASTNode;

// Symbol table
extern SymbolEntry symbolTable[MAX_SYMBOLS];
extern int symbolCount;
extern int currentScope;

// Function prototypes
void initSymbolTable(void);
int addSymbol(const char *name, SymbolType symType, DataType dataType, int scope);
int lookupSymbol(const char *name, int scope);
void freeAST(ASTNode *node);
ASTNode *createNode(NodeType type);
ASTNode *createBinaryOp(int operator, ASTNode *left, ASTNode *right);
ASTNode *createUnaryOp(int operator, ASTNode *operand);
ASTNode *createConstant(DataType type, ...);  // Uses varargs
ASTNode *createIdentifier(const char *name);
ASTNode *createNodeWithBlock(NodeType type, ASTNode *callNode, ASTNode *blockNode);
void yyerror(const char *s);

#endif // CAT_H
